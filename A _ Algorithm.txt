from queue import PriorityQueue

def a_star_algorithm(graph, start, goal, heuristic):
 
    pq = PriorityQueue()
    pq.put((0, start, [start]))
    g_cost = {node: float('inf') for node in graph}
    g_cost[start] = 0

    while not pq.empty():
        current_cost, current_node, path = pq.get()
        if current_node == goal:
            return path, current_cost
        for neighbor, cost in graph[current_node]:
            new_cost = g_cost[current_node] + cost
            if new_cost < g_cost[neighbor]:
                g_cost[neighbor] = new_cost
                f_cost = new_cost + heuristic[neighbor]
                pq.put((f_cost, neighbor, path + [neighbor]))

    return None
if __name__ == "__main__":
    graph = {
        "A": [("B", 1), ("C", 3)],
        "B": [("D", 3), ("E", 1)],
        "C": [("F", 5)],
        "D": [("G", 4)],
        "E": [("G", 1)],
        "F": [("G", 2)],
        "G": []
    }
    heuristic = {
        "A": 7,
        "B": 6,
        "C": 5,
        "D": 4,
        "E": 2,
        "F": 3,
        "G": 0
    }

    start_node = "A"
    goal_node = "G"

    result = a_star_algorithm(graph, start_node, goal_node, heuristic)
    if result:
        path, cost = result
        print("Shortest path:", " -> ".join(path))
        print("Total cost:", cost)
    else:
        print("No path found from", start_node, "to", goal_node)
