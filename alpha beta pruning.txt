import math

def alpha_beta_pruning(depth, node_index, maximizing_player, values, alpha, beta):
    if depth == 0 or node_index >= len(values):
        return values[node_index]

    if maximizing_player:
        best = -math.inf
        for i in range(2):  # Two children per node
            value = alpha_beta_pruning(depth - 1, node_index * 2 + i, False, values, alpha, beta)
            best = max(best, value)
            alpha = max(alpha, best)

            if beta <= alpha:
                break

        return best
    else:
        best = math.inf

       
        for i in range(2):  # Two children per node
            value = alpha_beta_pruning(depth - 1, node_index * 2 + i, True, values, alpha, beta)
            best = min(best, value)
            beta = min(beta, best)

           
            if beta <= alpha:
                break

        return best
if __name__ == "__main__":
   
    depth = 3

 
    values = [3, 5, 6, 9, 1, 2, 0, -1]

    
    result = alpha_beta_pruning(depth, 0, True, values, -math.inf, math.inf)
    print("The optimal value is:", result)
